{"version":3,"file":"index.GTAltUAn.js","sources":["../../../src/validationRules.ts","../../../src/validation.ts","../../../src/step.ts","../../../src/index.ts"],"sourcesContent":["import { FormousOptions } from './types';\n\n// バリデーションルールの型定義\nexport type ValidationRule = {\n    validate: (value: string, field: HTMLInputElement, options?: FormousOptions) => boolean;\n    message: (field: HTMLInputElement, options?: FormousOptions) => string;\n};\n\n// デフォルトのバリデーションルールセット\nexport const defaultValidationRules: { [key: string]: ValidationRule } = {\n    required: {\n        // 入力が空でないか確認\n        validate: (value, field) => {\n            // data-validation=\"required\" または required 属性があれば検証\n            const isRequired = field.hasAttribute('required') || field.getAttribute('data-validation')?.includes('required');\n            return !isRequired || value.trim().length > 0;\n        },\n        message: () => 'This field is required.',\n    },\n    email: {\n        // メールアドレス形式か確認\n        validate: (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n        message: () => 'Please enter a valid email address.',\n    },\n    numeric: {\n        // 数字形式か確認\n        validate: (value) => /^[0-9]+$/.test(value),\n        message: () => 'Please enter a valid number.',\n    },\n    alphanumeric: {\n        // 英数字形式か確認\n        validate: (value) => /^[a-zA-Z0-9]+$/.test(value),\n        message: () => 'Please enter only letters and numbers.',\n    },\n    minLength: {\n        validate: (value, field) => {\n            const minLength = field.getAttribute('minlength');\n            return !minLength || value.length >= parseInt(minLength);\n        },\n        message: (field) => `Minimum length is ${field.getAttribute('minlength')}`,\n    },\n    maxLength: {\n        validate: (value: string, field: HTMLInputElement) => {\n            const maxLength = field.getAttribute('maxlength');\n            if (!maxLength) return true;\n            return value.length <= Number(maxLength);\n        },\n        message: (field: HTMLInputElement) => {\n            const maxLength = field.getAttribute('maxlength');\n            return `Please enter no more than ${maxLength} characters`;\n        }\n    },\n    min: {\n        validate: (value: string, field: HTMLInputElement) => {\n            const minValue = field.getAttribute('min');\n            if (!minValue) return true;\n            const numValue = Number(value);\n            return !isNaN(numValue) && numValue >= Number(minValue);\n        },\n        message: (field: HTMLInputElement) => {\n            const min = field.getAttribute('min');\n            return `Please enter a value greater than or equal to ${min}`;\n        }\n    },\n    max: {\n        validate: (value: string, field: HTMLInputElement) => {\n            const maxValue = field.getAttribute('max');\n            if (!maxValue) return true;\n            const numValue = Number(value);\n            return !isNaN(numValue) && numValue <= Number(maxValue);\n        },\n        message: (field: HTMLInputElement) => {\n            const max = field.getAttribute('max');\n            return `Please enter a value less than or equal to ${max}`;\n        }\n    },\n    pattern: {\n        // 正規表現パターンに一致するか確認\n        validate: (value, field) => {\n            const pattern = field.getAttribute('data-pattern');\n            return pattern ? new RegExp(pattern).test(value) : true;\n        },\n        message: (field) => `Please match the requested format: ${field.getAttribute('data-pattern')}.`,\n    },\n    url: {\n        // URL形式か確認\n        validate: (value) => /^(https?:\\/\\/)?([\\w\\-]+)+([\\w\\-.]+)+(:\\d+)?(\\/[\\w\\-]*)*(\\?[\\w\\-=&]*)?(#[\\w\\-]*)?$/.test(value),\n        message: () => 'Please enter a valid URL.',\n    },\n    date: {\n        // 有効な日付か確認\n        validate: (value) => !isNaN(Date.parse(value)),\n        message: () => 'Please enter a valid date.',\n    },\n    time: {\n        // 時間形式か確認\n        validate: (value) => /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(value),\n        message: () => 'Please enter a valid time in HH:MM format.',\n    },\n    phone: {\n        // 電話番号形式か確認\n        validate: (value) => /^\\+?[0-9\\- ]{7,15}$/.test(value),\n        message: () => 'Please enter a valid phone number.',\n    },\n    postalCode: {\n        // 郵便番号形式か確認（日本の形式）\n        validate: (value) => /^[0-9]{3}-?[0-9]{4}$/.test(value),\n        message: () => 'Please enter a valid postal code.',\n    },\n    equals: {\n        // 他のフィールドの値と一致するか確認\n        validate: (value, field) => {\n            const targetId = field.getAttribute('data-equals');\n            const targetField = targetId ? document.getElementById(targetId) as HTMLInputElement : null;\n            return targetField ? value === targetField.value : true;\n        },\n        message: () => 'Values do not match.',\n    },\n    checkboxRequired: {\n        // チェックボックスが選択されているか確認\n        validate: (_, field) => (field as HTMLInputElement).checked,\n        message: () => 'This checkbox is required.',\n    },\n    fileRequired: {\n        // ファイルがアップロードされているか確認\n        validate: (_, field) => {\n            const files = (field as HTMLInputElement).files;\n            return files !== null && files.length > 0;\n        },\n        message: () => 'Please upload a file.',\n    },\n    accepted: {\n        // フィールドが承認済みか確認（\"yes\", \"on\", \"1\", \"true\" を確認）\n        validate: (value) => ['yes', 'on', '1', 'true'].includes(value.toLowerCase()),\n        message: () => 'This field must be accepted.',\n    },\n    json: {\n        // JSON形式か確認\n        validate: (value) => {\n            try {\n                JSON.parse(value);\n                return true;\n            } catch {\n                return false;\n            }\n        },\n        message: () => 'Please enter a valid JSON string.',\n    },\n    'checkbox-group': {\n        validate: (_, field) => {\n            const group = field.closest('fieldset[data-validation=\"checkbox-group\"]');\n            if (!group) return true; // グループがない場合は無効としない\n    \n            const checkboxes = group.querySelectorAll('input[type=\"checkbox\"]');\n            const min = parseInt(group.getAttribute('data-group-min') || '0', 10);\n            const max = group.getAttribute('data-group-max') ? parseInt(group.getAttribute('data-group-max') || '0', 10) : checkboxes.length;\n            const checkedCount = Array.from(checkboxes).filter((checkbox) => (checkbox as HTMLInputElement).checked).length;\n    \n            if (!group.getAttribute('data-group-min') && checkedCount > max) {\n                return false;\n            }\n            if (!group.getAttribute('data-group-max') && checkedCount < min) {\n                return false;\n            }\n            return checkedCount >= min && checkedCount <= max;\n        },\n        message: (field) => {\n            const group = field.closest('fieldset[data-validation=\"checkbox-group\"]');\n            const min = group?.getAttribute('data-group-min') || '0';\n            const max = group?.getAttribute('data-group-max') || '∞';\n    \n            if (!group?.getAttribute('data-group-min')) {\n                return `Please select at most ${max} options.`;\n            }\n            if (!group?.getAttribute('data-group-max')) {\n                return `Please select at least ${min} options.`;\n            }\n            return `Please select between ${min} and ${max} options.`;\n        },\n    },\n    'confirm-email': {\n        // メールアドレスが一致するか確認\n        validate: (value, field) => {\n            const emailInput = field.form?.querySelector('input[data-validation~=\"email\"]') as HTMLInputElement | null;\n            if (!emailInput || !emailInput.value) return true;\n            return value === emailInput.value;\n        },\n        message: () => 'Email addresses do not match.',\n    },\n    'password': {\n        validate: (value: string, _: HTMLInputElement, options?: FormousOptions) => {\n            const config = options?.validationPatterns?.password || {};\n            const minLength = config.minLength ?? 8;\n            const maxLength = config.maxLength ?? 100;\n            const requireUppercase = config.requireUppercase ?? true;\n            const requireNumber = config.requireNumber ?? true;\n            const requireSymbol = config.requireSymbol ?? true;\n            \n            if (value.length < minLength || value.length > maxLength) return false;\n            if (requireUppercase && !/[A-Z]/.test(value)) return false;\n            if (requireNumber && !/\\d/.test(value)) return false;\n            if (requireSymbol && !/[!@#$%^&*]/.test(value)) return false;\n            \n            return true;\n        },\n        message: (_: HTMLInputElement, options?: FormousOptions) => {\n            const config = options?.validationPatterns?.password || {};\n            const minLength = config.minLength ?? 8;\n            const maxLength = config.maxLength ?? 100;\n            const requireUppercase = config.requireUppercase ?? true;\n            const requireNumber = config.requireNumber ?? true;\n            const requireSymbol = config.requireSymbol ?? true;\n            \n            const requirements = [];\n            requirements.push(`at least ${minLength} characters${maxLength !== 100 ? `, maximum ${maxLength} characters` : ''}`);\n            if (requireUppercase) requirements.push('uppercase letter');\n            if (requireNumber) requirements.push('number');\n            if (requireSymbol) requirements.push('special character (!@#$%^&*)');\n    \n            return `Password must contain ${requirements.join(', ')}`;\n        }\n    },\n};\n","// バリデーションルールの型定義とデフォルトルールのインポート\nimport { defaultValidationRules, ValidationRule } from './validationRules';\n// FormousOptionsをインポートする\nimport { FormousOptions } from './types';\n\n// デフォルトのバリデーションルールを複製して、必要に応じてカスタムルールを追加\nexport const ValidationRules: { [key: string]: ValidationRule } = { ...defaultValidationRules };\n\n// カスタムルールを登録するための関数\nexport function addCustomValidationRules(customRules: { [key: string]: ValidationRule }) {\n    // カスタムルールを既存のルールにマージ\n    Object.assign(ValidationRules, customRules);\n}\n\n// 単一のフィールドをバリデートする関数\nexport function validateField(field: HTMLInputElement, options?: FormousOptions, showGlobalErrors: boolean = false): boolean {\n    const fieldset = field.closest('fieldset[data-validation]');\n    let isValid = true;\n    let errorsByType: { [key: string]: string | ((field: HTMLInputElement) => string) } = {};\n\n    // HTML標準属性のバリデーション\n    const standardValidations = [\n        { attr: 'required', type: 'required' },\n        { attr: 'min', type: 'min' },\n        { attr: 'max', type: 'max' },\n        { attr: 'minlength', type: 'minLength' },\n        { attr: 'maxlength', type: 'maxLength' }\n    ];\n\n    // type属性による追加のバリデーション\n    if (field.type === 'email') {\n        const rule = ValidationRules['email'];\n        if (rule && !rule.validate(field.value, field)) {\n            errorsByType['email'] = rule.message(field);\n            isValid = false;\n        }\n    }\n\n    standardValidations.forEach(validation => {\n        if (field.hasAttribute(validation.attr)) {\n            const rule = ValidationRules[validation.type];\n            if (rule && !rule.validate(field.value, field)) {\n                // ここでオプションのメッセージを使用\n                const optionMessage = options?.validationMessages?.[validation.type];\n                const message = typeof rule.message === 'function' ? rule.message(field) : rule.message;\n                errorsByType[validation.type] = optionMessage || message;\n                isValid = false;\n            }\n        }\n    });\n\n    // data-validationによるバリデーション\n    const validationTypes = fieldset \n        ? fieldset.getAttribute('data-validation')?.split(' ') || []\n        : field.getAttribute('data-validation')?.split(' ') || [];\n\n    validationTypes.forEach(type => {\n        const rule = ValidationRules[type];\n        if (rule) {\n            const result = rule.validate(field.value, field, options);\n            if (!result) {\n                errorsByType[type] = rule.message(field, options);\n                isValid = false;\n            }\n        }\n    });\n\n    // エラーメッセージの表示\n    const container = fieldset || field.closest('div');\n    if (container) {\n        const errorElements = container.querySelectorAll('[data-validation=\"error\"]');\n        updateErrorElements(errorElements, errorsByType as { [key: string]: string }, field, options);\n    }\n\n    // data-validation-for属性を持つ離れた場所のエラー要素を探して更新\n    const fieldName = field.getAttribute('name');\n    if (fieldName) {\n        const remoteErrorElements = document.querySelectorAll(`[data-validation=\"error\"][data-validation-for=\"${fieldName}\"]`);\n        const globalErrorContainer = document.querySelector('[data-validation-error-global]');\n        \n        // グローバルエラーの表示制御\n        if (showGlobalErrors || globalErrorContainer?.classList.contains('active')) {\n            updateErrorElements(remoteErrorElements, errorsByType as { [key: string]: string }, field, options);\n        }\n\n        // グローバルエラーコンテナの表示制御\n        const hasVisibleErrors = Array.from(remoteErrorElements).some(\n            el => (el as HTMLElement).style.display === 'block'\n        );\n        globalErrorContainer?.classList.toggle('active', hasVisibleErrors);\n    }\n\n    return isValid;\n}\n\nfunction getErrorMessage(type: string, field: HTMLInputElement, errorsByType: { [key: string]: string }, options?: FormousOptions): string {\n    console.log('Debug getErrorMessage:', {\n        type,\n        errorsByType,\n        hasError: errorsByType[type],\n        options,\n        validationMessages: options?.validationMessages,\n        optionMessage: options?.validationMessages?.[type]\n    });\n\n    // エラーが発生している場合のみメッセージを表示\n    if (!errorsByType[type]) {\n        return '';\n    }\n\n    // 優先順位3: data-error-fixed属性がある場合（最優先）\n    const errorElement = field.closest('div')?.querySelector(`[data-validation-type=\"${type}\"]`);\n    if (errorElement?.hasAttribute('data-error-fixed')) {\n        console.log('Using fixed message:', errorElement.innerHTML);\n        return errorElement.innerHTML;\n    }\n\n    // 優先順位2: オプションで指定されたメッセージ\n    const optionMessage = options?.validationMessages?.[type];\n    if (optionMessage) {\n        console.log('Using option message:', optionMessage);\n        if (typeof optionMessage === 'function') {\n            const message = (optionMessage as (field: HTMLInputElement) => string)(field);\n            console.log('Function message result:', message);\n            return message;\n        }\n        return optionMessage as string;\n    }\n\n    // 優先順位1: ValidationRulesのメッセージ（最後）\n    console.log('Using default message:', errorsByType[type]);\n    return errorsByType[type];\n}\n\n// エラー要素の更新を行うヘルパー関数\nfunction updateErrorElements(elements: NodeListOf<Element>, errorsByType: { [key: string]: string }, field: HTMLInputElement, options?: FormousOptions) {\n    const singleErrorMode = elements.length === 1;\n    const hasErrors = Object.keys(errorsByType).length > 0;\n\n    elements.forEach(errorElement => {\n        const targetType = errorElement.getAttribute('data-validation-type');\n        const element = errorElement as HTMLElement;\n        const hasInnerText = element.innerHTML.trim();\n        const isFixed = element.hasAttribute('data-error-fixed');\n\n        if (targetType) {\n            const message = getErrorMessage(targetType, field, errorsByType, options);\n            if (isFixed) {\n                element.style.display = errorsByType[targetType] ? 'block' : 'none';\n                return;\n            }\n\n            const optionMessage = options?.validationMessages?.[targetType];\n            if (optionMessage) {\n                element.innerHTML = message;\n            } else if (hasInnerText) {\n            } else {\n                element.innerHTML = message;\n            }\n            element.style.display = errorsByType[targetType] ? 'block' : 'none';\n        } else if (singleErrorMode) {\n            const firstErrorType = Object.keys(errorsByType)[0];\n            const message = getErrorMessage(firstErrorType, field, errorsByType, options);\n            if (!isFixed) {\n                const optionMessage = options?.validationMessages?.[firstErrorType];\n                if (optionMessage || !hasInnerText) {\n                    element.innerHTML = message;\n                }\n            }\n            // すべてのバリデーションエラーがなくなれば非表示\n            element.style.display = hasErrors ? 'block' : 'none';\n        }\n    });\n}\n\n/**\n * スムーズスクロール機能を提供する関数\n * @param element - スクロール対象のHTML要素\n * @param options - スクロールのオプション設定\n * - offset: スクロール位置の上部からのオフセット（デフォルト: 50px）\n * - behavior: スクロールの動作（'smooth'または'auto'）\n * - duration: スクロールアニメーションの時間（例: '0.5s'）\n */\nexport function smoothScroll(element: HTMLElement, options: FormousOptions['scrollOptions'] = {}) {\n    const {\n        offset = 50,\n        behavior = 'smooth',\n        duration = '0.5s'\n    } = options;\n\n    // CSSプロパティを一時的に設定してスクロール動作をカスタマイズ\n    document.documentElement.style.setProperty('scroll-behavior', behavior);\n    document.documentElement.style.setProperty('transition-duration', duration);\n    document.documentElement.style.setProperty('scroll-timeline-name', 'scroll');\n\n    // 要素の上部マージンを設定してスクロール位置を調整\n    element.style.scrollMargin = `${offset}px`;\n\n    // 要素まで滑らかにスクロール\n    element.scrollIntoView({\n        behavior,\n        block: 'nearest',  // 最も近い位置にスクロール\n        inline: 'nearest'\n    });\n\n    // スクロールアニメーション完了後の処理\n    setTimeout(() => {\n        // 一時的なCSSプロパティを削除\n        document.documentElement.style.removeProperty('scroll-behavior');\n        document.documentElement.style.removeProperty('transition-duration');\n        document.documentElement.style.removeProperty('scroll-timeline-name');\n\n        // スクロール完了後、少し遅延を入れてからフォーカスを設定\n        setTimeout(() => {\n            element.focus();\n        }, 2000);\n    }, parseFloat(duration) * 1000);\n}\n\n/**\n * フォーム全体のバリデーションを行う関数\n * @param form - バリデーション対象のフォーム要素\n * @param options - バリデーションのオプション設定\n * @returns boolean - バリデーション結果（true: 成功, false: 失敗）\n */\nexport function validateForm(form: HTMLFormElement, options: FormousOptions): boolean {\n    const fields = form.querySelectorAll('input, textarea, select');\n    let isValid = true;\n    let firstErrorField: HTMLElement | null = null;\n\n    // 各フィールドのバリデーション\n    fields.forEach((field) => {\n        const fieldValid = validateField(field as HTMLInputElement, options, true);  // フォーム送信時はグローバルエラーを表示\n        if (!fieldValid) {\n            isValid = false;\n            // 最初のエラーフィールドを記録（スクロール用）\n            if (!firstErrorField) {\n                firstErrorField = field as HTMLElement;\n            }\n        }\n    });\n\n    // エラーがある場合、最初のエラーフィールドまでスクロール\n    if (!isValid && firstErrorField) {\n        setTimeout(() => {\n            if (firstErrorField) {\n                smoothScroll(firstErrorField, options.scrollOptions);\n            }\n        }, 0);\n    }\n\n    return isValid;\n}\n\nexport function Formous(options: FormousOptions) {\n    console.log('1. Formous initialization started');  // ステップ1: 初期化開始\n\n    const form = document.querySelector(options.formSelector) as HTMLFormElement;\n    if (!form) {\n        console.error('Form not found');\n        return;\n    }\n    console.log('2. Form found:', form);  // ステップ2: フォーム発見\n\n    // ステップ3: クリックイベントの設定\n    form.addEventListener('click', (event) => {\n        const target = event.target as HTMLElement;\n        \n        // ボタンクリックの確認\n        if (target.hasAttribute('data-action')) {\n            console.log('3. Action button clicked:', {\n                action: target.getAttribute('data-action'),\n                element: target\n            });\n            \n            event.preventDefault();\n            const action = target.getAttribute('data-action');\n            \n            // 現在のステップを取得\n            const currentStep = target.closest('.step');\n            if (!currentStep) {\n                console.error('Current step not found');\n                return;\n            }\n            console.log('4. Current step:', currentStep);\n\n            // すべてのステップを取得\n            const steps = Array.from(form.querySelectorAll('.step'));\n            const currentIndex = steps.indexOf(currentStep);\n            console.log('5. Current index:', currentIndex);\n\n            // アクションの処理\n            if (action === 'next' || action === 'confirm') {\n                console.log('6. Processing next/confirm action');\n                if (currentIndex < steps.length - 1) {\n                    // 現在のステップを非表示\n                    currentStep.classList.remove('active');\n                    (currentStep as HTMLElement).style.display = 'none';\n                    \n                    // 次のステップを表示\n                    const nextStep = steps[currentIndex + 1];\n                    nextStep.classList.add('active');\n                    (nextStep as HTMLElement).style.display = 'block';\n                    \n                    console.log('7. Moved to next step:', nextStep);\n                }\n            }\n        }\n    });\n\n    console.log('8. Event listener setup completed');\n}\n","import { validateField, smoothScroll } from './validation';\nimport { FormousOptions } from './types';\n\n// ステップフォームを初期化する関数\nexport function initializeStepForm(form: HTMLFormElement, enableConfirmationPage: boolean = false, options?: FormousOptions) {\n    const {\n        progressFillSelector = '#progress-fill',\n        indicatorSelector = '.step-indicator',\n        progressSelector = '#step-progress'\n    } = options?.stepOptions || {};\n\n    let steps = Array.from(form.querySelectorAll('.step'));\n    const progressBarFill = form.querySelector(progressFillSelector) as HTMLElement;\n    const stepIndicators = form.querySelectorAll(indicatorSelector);\n    const stepProgress = form.querySelector(progressSelector) as HTMLElement;\n    let currentStepIndex = 0;\n\n    if (enableConfirmationPage) {\n        let confirmationStep = form.querySelector('.step[data-confirmation=\"true\"]') as HTMLElement | null;\n\n        if (!confirmationStep) {\n            confirmationStep = document.createElement('div');\n            confirmationStep.classList.add('step');\n            confirmationStep.setAttribute('data-confirmation', 'true');\n            confirmationStep.innerHTML = `\n              <h3>Confirmation</h3>\n              <div id=\"confirmation-content\"></div>\n              <button type=\"button\" data-action=\"previous\">Back</button>\n              <input type=\"submit\" data-wait=\"Please wait...\" data-action=\"confirm\" value=\"Submit\">\n            `;\n            form.appendChild(confirmationStep);\n        }\n        steps = Array.from(form.querySelectorAll('.step'));\n    }\n\n    const updateConfirmationPage = (options: FormousOptions) => {\n        const confirmationStep = form.querySelector('.step[data-confirmation=\"true\"]') as HTMLElement | null;\n        if (!confirmationStep) return;\n\n        // data-confirm属性を持つ要素をすべて取得\n        const confirmElements = confirmationStep.querySelectorAll('[data-confirm]');\n        \n        confirmElements.forEach(element => {\n            const fieldName = element.getAttribute('data-confirm');\n            if (!fieldName) return;\n\n            // チェックボックスグループの処理\n            const fieldset = form.querySelector(`fieldset input[name=\"${fieldName}\"]`)?.closest('fieldset');\n            if (fieldset) {\n                const checkedBoxes = form.querySelectorAll(`input[name=\"${fieldName}\"]:checked`);\n                const labels = Array.from(checkedBoxes).map(checkbox => {\n                    const label = checkbox.nextElementSibling as HTMLElement;\n                    return label?.textContent || '';\n                }).filter(Boolean);\n\n                const delimiter = options.confirmationOptions?.delimiter || ',';\n                element.textContent = labels.join(delimiter);\n            } else {\n                // 通常のinput要素の処理\n                const field = form.querySelector(`[name=\"${fieldName}\"]`) as HTMLInputElement;\n                if (field) {\n                    element.textContent = field.value || '未入力';\n                } else {\n                    element.textContent = '未入力';\n                }\n            }\n        });\n    };\n\n    const updateProgressBar = () => {\n        const progressPercentage = ((currentStepIndex + 1) / steps.length) * 100;\n        if (progressBarFill) progressBarFill.style.width = `${progressPercentage}%`;\n\n        stepIndicators.forEach((indicator, index) => {\n            indicator.classList.toggle('active', index <= currentStepIndex);\n        });\n\n        if (stepProgress) {\n            stepProgress.textContent = `Step ${currentStepIndex + 1}/${steps.length}`;\n        }\n    };\n\n    const validateCurrentStep = (): boolean => {\n        const currentStep = steps[currentStepIndex];\n        const fields = currentStep.querySelectorAll(\n            'input, textarea, select, [contenteditable=\"true\"], ' + \n            'button[role=\"combobox\"], div[role=\"listbox\"], ' +\n            'div[role=\"slider\"], div[role=\"spinbutton\"]'\n        );\n\n        let isValid = true;\n        fields.forEach((field) => {\n            if (!validateField(field as HTMLInputElement, options)) {\n                isValid = false;\n            }\n        });\n\n        return isValid;\n    };\n\n    const showStep = (index: number) => {\n        steps.forEach((step, i) => step.classList.toggle('active', i === index));\n        currentStepIndex = index;\n        updateProgressBar();\n\n        const currentStep = steps[currentStepIndex];\n        const nextButton = currentStep.querySelector('[data-action=\"next\"]') as HTMLButtonElement | null;\n        const confirmButton = currentStep.querySelector('[data-action=\"confirm\"]') as HTMLButtonElement | null;\n\n        if (enableConfirmationPage && currentStepIndex === steps.length - 2) {\n            if (nextButton) nextButton.style.display = 'none';\n            if (confirmButton) confirmButton.style.display = 'inline-block';\n        } else {\n            if (nextButton) nextButton.style.display = 'inline-block';\n            if (confirmButton) confirmButton.style.display = 'none';\n        }\n        if (enableConfirmationPage && currentStepIndex === steps.length - 1) {\n            updateConfirmationPage(options || {\n                formSelector: '#step-form',\n                confirmationOptions: {\n                    delimiter: '、'\n                }\n            });\n        }\n    };\n\n    const handleNext = () => {\n        const isValid = validateCurrentStep();\n        if (!isValid) {\n            const currentStep = steps[currentStepIndex];\n            const firstErrorField = currentStep.querySelector('input:invalid, textarea:invalid, select:invalid') as HTMLElement;\n            if (firstErrorField) {\n                smoothScroll(firstErrorField, options?.scrollOptions);\n            }\n            return;\n        }\n        \n        if (currentStepIndex < steps.length - 1) {\n            showStep(currentStepIndex + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentStepIndex > 0) {\n            showStep(currentStepIndex - 1);\n        }\n    };\n\n    const handleIndicatorClick = (index: number) => {\n        if (index > currentStepIndex && !validateCurrentStep()) {\n            return;\n        }\n        showStep(index);\n    };\n\n    showStep(currentStepIndex);\n\n    form.addEventListener('click', (event) => {\n        const target = event.target as HTMLElement;\n        if (target.hasAttribute('data-action')) {\n            const action = target.getAttribute('data-action');\n            if (action === 'next' || action === 'confirm') handleNext();\n            else if (action === 'previous') handlePrevious();\n            else if (action === 'edit') {\n                const targetStep = parseInt(target.getAttribute('data-target-step') || '1') - 1;\n                showStep(targetStep);\n            }\n        }\n    });\n\n    stepIndicators.forEach((indicator, index) => {\n        indicator.addEventListener('click', () => handleIndicatorClick(index));\n    });\n\n    return {\n        showStep,\n        handleNext,\n        handlePrevious,\n        updateProgressBar,\n        updateConfirmationPage,\n    };\n}\n\nconst validationRules = {\n    required: {\n        message: 'This field is required'\n    }\n};\n\nconst customRule = validationRules['required'];\nif (customRule) {\n    console.log(`Custom rule found: ${customRule.message}`);\n}\n","/**\n * Formousライブラリのメインモジュール\n * フォームのバリデーション、スクロール、ステップ管理などの機能を提供\n */\nimport { validateField, validateForm, addCustomValidationRules, smoothScroll } from './validation';\nimport { initializeStepForm } from './step';\nimport { FormousOptions } from './types';\n\n// グローバル型定義の拡張\ndeclare global {\n  interface Window {\n    Formous: typeof FormousInit;\n    Webflow: any[];\n  }\n}\n\n// Webflowとの統合のためのグローバル変数初期化\nif (typeof window !== 'undefined') {\n  window.Webflow = window.Webflow || [];\n}\n\n/**\n * Formousのメイン初期化関数\n * @param options - フォームの設定オプション\n * @returns フォーム操作用のメソッドを含むオブジェクト\n */\nconst FormousInit = (options: FormousOptions) => {\n  // Webflow統合モードの場合\n  if (options.enableWebflow) {\n    window.Webflow.push(() => {\n      initializeFormous(options);\n    });\n    return;\n  }\n\n  // 通常モードの場合\n  return initializeFormous(options);\n}\n\n/**\n * フォームの実際の初期化処理を行う内部関数\n * @param options - フォームの設定オプション\n * @returns フォーム操作用のメソッドを含むオブジェクト\n */\nfunction initializeFormous(options: FormousOptions) {\n  const form = document.querySelector(options.formSelector) as HTMLFormElement;\n  if (!form) {\n    console.error('Form not found');\n    return;\n  }\n\n  // カスタムバリデーションルールの登録\n  if (options.customRules) {\n    addCustomValidationRules(options.customRules);\n  }\n\n  // リアルタイムバリデーションの設定\n  const fields = form.querySelectorAll('input, textarea, select');\n  fields.forEach((field) => {\n    field.addEventListener('input', () => validateField(field as HTMLInputElement, options, false));  // リアルタイムではグローバルエラーを表示しない\n    field.addEventListener('blur', () => validateField(field as HTMLInputElement, options, false));   // フォーカスアウト時もグローバルエラーを表示しない\n  });\n\n  // Webflow統合時の特別な設定\n  if (options.enableWebflow) {\n    form.setAttribute('novalidate', 'true');\n    // 初期状態ではエラーメッセージを非表示\n    form.querySelectorAll('[data-validation=\"error\"]').forEach(error => {\n      (error as HTMLElement).style.display = 'none';\n    });\n  }\n\n  // フォーム送信時の処理\n  form.addEventListener('submit', async (e) => {\n    if (options.enableWebflow) {\n      // Webflow統合モードでのバリデーション\n      const isValid = validateForm(form, options);\n      if (!isValid) {\n        e.preventDefault();\n        e.stopPropagation();\n        return;\n      }\n      return;  // Webflowの標準送信を許可\n    }\n\n    // 通常モードでの送信処理\n    e.preventDefault();\n    const isValid = validateForm(form, options);\n\n    if (!isValid) {\n      // エラー時の処理：最初のエラーフィールドまでスクロール\n      const firstErrorField = form.querySelector('input:invalid, textarea:invalid, select:invalid') as HTMLElement;\n      if (firstErrorField) {\n        smoothScroll(firstErrorField, options.scrollOptions);\n      }\n      return;\n    }\n\n    // カスタム送信処理の実行\n    const formData = new FormData(form);\n    try {\n      if ('onSubmit' in options) {\n        await (options as { onSubmit: (data: FormData) => Promise<void> }).onSubmit(formData);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  });\n\n  // ステップフォームを常に初期化\n  return initializeStepForm(form, options.enableConfirmationPage || false, options);\n\n  // フォーム操作用のメソッドを返却\n  return {\n    validateForm: () => validateForm(form, options),\n    validateField: (field: HTMLInputElement) => validateField(field, options)\n  };\n}\n\n// 名前付きエクスポートのみを使用\nexport { FormousInit as Formous };\n\n// グローバル変数として公開\nif (typeof window !== 'undefined') {\n  window.Formous = FormousInit;\n}\n"],"names":["defaultValidationRules","value","field","_a","minLength","maxLength","minValue","numValue","maxValue","pattern","targetId","targetField","_","files","group","checkboxes","min","max","checkedCount","checkbox","emailInput","options","config","requireUppercase","requireNumber","requireSymbol","requirements","ValidationRules","addCustomValidationRules","customRules","validateField","showGlobalErrors","fieldset","isValid","errorsByType","standardValidations","rule","validation","optionMessage","message","_b","type","container","errorElements","updateErrorElements","fieldName","remoteErrorElements","globalErrorContainer","hasVisibleErrors","el","getErrorMessage","errorElement","_c","elements","singleErrorMode","hasErrors","targetType","element","hasInnerText","isFixed","firstErrorType","smoothScroll","offset","behavior","duration","validateForm","form","fields","firstErrorField","initializeStepForm","enableConfirmationPage","progressFillSelector","indicatorSelector","progressSelector","steps","progressBarFill","stepIndicators","stepProgress","currentStepIndex","confirmationStep","updateConfirmationPage","checkedBoxes","labels","label","delimiter","updateProgressBar","progressPercentage","indicator","index","validateCurrentStep","showStep","step","i","currentStep","nextButton","confirmButton","handleNext","handlePrevious","handleIndicatorClick","event","target","action","targetStep","validationRules","customRule","FormousInit","initializeFormous","error","e","formData"],"mappings":"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"}