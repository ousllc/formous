{"version":3,"file":"index.XG50sKaC.js","sources":["../../../src/validationRules.ts","../../../src/validation.ts","../../../src/step.ts","../../../src/index.ts"],"sourcesContent":["import { FormousOptions } from './types';\n\n// バリデーションルールの型定義\nexport type ValidationRule = {\n    validate: (value: string, field: HTMLInputElement, options?: FormousOptions) => boolean;\n    message: (field: HTMLInputElement, options?: FormousOptions) => string;\n};\n\n// デフォルトのバリデーションルールセット\nexport const defaultValidationRules: { [key: string]: ValidationRule } = {\n    required: {\n        // 入力が空でないか確認\n        validate: (value, field) => {\n            // data-validation=\"required\" または required 属性があれば検証\n            const isRequired = field.hasAttribute('required') || field.getAttribute('data-validation')?.includes('required');\n            return !isRequired || value.trim().length > 0;\n        },\n        message: () => 'This field is required.',\n    },\n    email: {\n        // メールアドレス形式か確認\n        validate: (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n        message: () => 'Please enter a valid email address.',\n    },\n    numeric: {\n        // 数字形式か確認\n        validate: (value) => /^[0-9]+$/.test(value),\n        message: () => 'Please enter a valid number.',\n    },\n    alphanumeric: {\n        // 英数字形式か確認\n        validate: (value) => /^[a-zA-Z0-9]+$/.test(value),\n        message: () => 'Please enter only letters and numbers.',\n    },\n    minLength: {\n        validate: (value, field) => {\n            const minLength = field.getAttribute('minlength');\n            return !minLength || value.length >= parseInt(minLength);\n        },\n        message: (field) => `Minimum length is ${field.getAttribute('minlength')}`,\n    },\n    maxLength: {\n        validate: (value: string, field: HTMLInputElement) => {\n            const maxLength = field.getAttribute('maxlength');\n            if (!maxLength) return true;\n            return value.length <= Number(maxLength);\n        },\n        message: (field: HTMLInputElement) => {\n            const maxLength = field.getAttribute('maxlength');\n            return `Please enter no more than ${maxLength} characters`;\n        }\n    },\n    min: {\n        validate: (value: string, field: HTMLInputElement) => {\n            const minValue = field.getAttribute('min');\n            if (!minValue) return true;\n            const numValue = Number(value);\n            return !isNaN(numValue) && numValue >= Number(minValue);\n        },\n        message: (field: HTMLInputElement) => {\n            const min = field.getAttribute('min');\n            return `Please enter a value greater than or equal to ${min}`;\n        }\n    },\n    max: {\n        validate: (value: string, field: HTMLInputElement) => {\n            const maxValue = field.getAttribute('max');\n            if (!maxValue) return true;\n            const numValue = Number(value);\n            return !isNaN(numValue) && numValue <= Number(maxValue);\n        },\n        message: (field: HTMLInputElement) => {\n            const max = field.getAttribute('max');\n            return `Please enter a value less than or equal to ${max}`;\n        }\n    },\n    pattern: {\n        // 正規表現パターンに一致するか確認\n        validate: (value, field) => {\n            const pattern = field.getAttribute('data-pattern');\n            return pattern ? new RegExp(pattern).test(value) : true;\n        },\n        message: (field) => `Please match the requested format: ${field.getAttribute('data-pattern')}.`,\n    },\n    url: {\n        validate: (value) => {\n            if (!value) return true;\n\n            try {\n                const url = new URL(value);\n                // プロトコルチェック\n                if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n                    return false;\n                }\n                // ドメインチェック\n                return /^([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$/.test(url.hostname);\n            } catch {\n                try {\n                    const url = new URL(`https://${value}`);\n                    // ホスト名が正しい形式であることを確認\n                    return /^([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$/.test(url.hostname);\n                } catch {\n                    return false;\n                }\n            }\n        },\n        message: () => 'URLの形式が正しくありません。',\n    },\n    date: {\n        // 有効な日付か確認\n        validate: (value) => !isNaN(Date.parse(value)),\n        message: () => 'Please enter a valid date.',\n    },\n    time: {\n        // 時間形式か確認\n        validate: (value) => /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(value),\n        message: () => 'Please enter a valid time in HH:MM format.',\n    },\n    phone: {\n        // 電話番号形式か確認\n        validate: (value) => /^\\+?[0-9\\- ]{7,15}$/.test(value),\n        message: () => 'Please enter a valid phone number.',\n    },\n    postalCode: {\n        // 郵便番号形式か確認（日本の形式）\n        validate: (value) => /^[0-9]{3}-?[0-9]{4}$/.test(value),\n        message: () => 'Please enter a valid postal code.',\n    },\n    equals: {\n        // 他のフィールドの値と一致するか確認\n        validate: (value, field) => {\n            const targetId = field.getAttribute('data-equals');\n            const targetField = targetId ? document.getElementById(targetId) as HTMLInputElement : null;\n            return targetField ? value === targetField.value : true;\n        },\n        message: () => 'Values do not match.',\n    },\n    checkboxRequired: {\n        // チェックボックスが選択されているか確認\n        validate: (_, field) => (field as HTMLInputElement).checked,\n        message: () => 'This checkbox is required.',\n    },\n    fileRequired: {\n        // ファイルがアップロードされているか確認\n        validate: (_, field) => {\n            const files = (field as HTMLInputElement).files;\n            return files !== null && files.length > 0;\n        },\n        message: () => 'Please upload a file.',\n    },\n    accepted: {\n        // フィールドが承認済みか確認（\"yes\", \"on\", \"1\", \"true\" を確認）\n        validate: (value) => ['yes', 'on', '1', 'true'].includes(value.toLowerCase()),\n        message: () => 'This field must be accepted.',\n    },\n    json: {\n        // JSON形式か確認\n        validate: (value) => {\n            try {\n                JSON.parse(value);\n                return true;\n            } catch {\n                return false;\n            }\n        },\n        message: () => 'Please enter a valid JSON string.',\n    },\n    'checkbox-group': {\n        validate: (_, field) => {\n            const group = field.closest('fieldset[data-validation=\"checkbox-group\"]');\n            if (!group) return true; // グループがない場合は無効としない\n    \n            const checkboxes = group.querySelectorAll('input[type=\"checkbox\"]');\n            const min = parseInt(group.getAttribute('data-group-min') || '0', 10);\n            const max = group.getAttribute('data-group-max') ? parseInt(group.getAttribute('data-group-max') || '0', 10) : checkboxes.length;\n            const checkedCount = Array.from(checkboxes).filter((checkbox) => (checkbox as HTMLInputElement).checked).length;\n    \n            if (!group.getAttribute('data-group-min') && checkedCount > max) {\n                return false;\n            }\n            if (!group.getAttribute('data-group-max') && checkedCount < min) {\n                return false;\n            }\n            return checkedCount >= min && checkedCount <= max;\n        },\n        message: (field) => {\n            const group = field.closest('fieldset[data-validation=\"checkbox-group\"]');\n            const min = group?.getAttribute('data-group-min') || '0';\n            const max = group?.getAttribute('data-group-max') || '∞';\n    \n            if (!group?.getAttribute('data-group-min')) {\n                return `Please select at most ${max} options.`;\n            }\n            if (!group?.getAttribute('data-group-max')) {\n                return `Please select at least ${min} options.`;\n            }\n            return `Please select between ${min} and ${max} options.`;\n        },\n    },\n    'confirm-email': {\n        // メールアドレスが一致するか確認\n        validate: (value, field) => {\n            const emailInput = field.form?.querySelector('input[data-validation~=\"email\"]') as HTMLInputElement | null;\n            if (!emailInput || !emailInput.value) return true;\n            return value === emailInput.value;\n        },\n        message: () => 'Email addresses do not match.',\n    },\n    'password': {\n        validate: (value: string, _: HTMLInputElement, options?: FormousOptions) => {\n            const config = options?.validationPatterns?.password || {};\n            const minLength = config.minLength ?? 8;\n            const maxLength = config.maxLength ?? 100;\n            const requireUppercase = config.requireUppercase ?? true;\n            const requireNumber = config.requireNumber ?? true;\n            const requireSymbol = config.requireSymbol ?? true;\n            \n            if (value.length < minLength || value.length > maxLength) return false;\n            if (requireUppercase && !/[A-Z]/.test(value)) return false;\n            if (requireNumber && !/\\d/.test(value)) return false;\n            if (requireSymbol && !/[!@#$%^&*]/.test(value)) return false;\n            \n            return true;\n        },\n        message: (_: HTMLInputElement, options?: FormousOptions) => {\n            const config = options?.validationPatterns?.password || {};\n            const minLength = config.minLength ?? 8;\n            const maxLength = config.maxLength ?? 100;\n            const requireUppercase = config.requireUppercase ?? true;\n            const requireNumber = config.requireNumber ?? true;\n            const requireSymbol = config.requireSymbol ?? true;\n            \n            const requirements = [];\n            requirements.push(`at least ${minLength} characters${maxLength !== 100 ? `, maximum ${maxLength} characters` : ''}`);\n            if (requireUppercase) requirements.push('uppercase letter');\n            if (requireNumber) requirements.push('number');\n            if (requireSymbol) requirements.push('special character (!@#$%^&*)');\n    \n            return `Password must contain ${requirements.join(', ')}`;\n        }\n    },\n    halfwidthKatakana: {\n        validate: (value) => {\n            if (!value) return true;\n            // 半角カタカナの正規表現\n            return /^[ｦ-ﾟ]+$/.test(value);\n        },\n        message: () => '半角カタカナで入力してください。',\n    },\n    zenkaku: {\n        validate: (value) => {\n            if (!value) return true;\n            // 全角文字（ひらがな・カタカナ・漢字・全角英数字・記号）の正規表現\n            return /^[^\\x01-\\x7E\\xA1-\\xDF]+$/.test(value);\n        },\n        message: () => '全角文字で入力してください。',\n    },\n};\n","// バリデーションルールの型定義とデフォルトルールのインポート\nimport { defaultValidationRules, ValidationRule } from './validationRules';\n// FormousOptionsをインポートする\nimport { FormousOptions } from './types';\n\n// デフォルトのバリデーションルールを複製して、必要に応じてカスタムルールを追加\nexport const ValidationRules: { [key: string]: ValidationRule } = { ...defaultValidationRules };\n\n// カスタムルールを登録するための関数\nexport function addCustomValidationRules(customRules: { [key: string]: ValidationRule }) {\n    // カスタムルールを既存のルールにマージ\n    Object.assign(ValidationRules, customRules);\n}\n\n// 単一のフィールドをバリデートする関数\nexport function validateField(field: HTMLInputElement, options?: FormousOptions, showGlobalErrors: boolean = false): boolean {\n    const fieldset = field.closest('fieldset[data-validation]');\n    let isValid = true;\n    let errorsByType: { [key: string]: string | ((field: HTMLInputElement) => string) } = {};\n\n    // HTML標準属性のバリデーション\n    const standardValidations = [\n        { attr: 'required', type: 'required' },\n        { attr: 'min', type: 'min' },\n        { attr: 'max', type: 'max' },\n        { attr: 'minlength', type: 'minLength' },\n        { attr: 'maxlength', type: 'maxLength' }\n    ];\n\n    // type属性による追加のバリデーション\n    const typeValidations = {\n        'email': 'email',\n        'url': 'url',\n        'date': 'date',\n        'time': 'time',\n        'tel': 'phone',\n        'number': 'numeric'\n    };\n\n    // type属性のバリデーション\n    if (field.type in typeValidations) {\n        const validationType = typeValidations[field.type as keyof typeof typeValidations];\n        const rule = ValidationRules[validationType];\n        if (rule && !rule.validate(field.value, field)) {\n            errorsByType[validationType] = rule.message(field);\n            isValid = false;\n        }\n    }\n\n    standardValidations.forEach(validation => {\n        if (field.hasAttribute(validation.attr)) {\n            const rule = ValidationRules[validation.type];\n            if (rule && !rule.validate(field.value, field)) {\n                // ここでオプションのメッセージを使用\n                const optionMessage = options?.validationMessages?.[validation.type];\n                const message = typeof rule.message === 'function' ? rule.message(field) : rule.message;\n                errorsByType[validation.type] = optionMessage || message;\n                isValid = false;\n            }\n        }\n    });\n\n    // data-validationによるバリデーション\n    const validationTypes = fieldset \n        ? fieldset.getAttribute('data-validation')?.split(' ') || []\n        : field.getAttribute('data-validation')?.split(' ') || [];\n\n    validationTypes.forEach(type => {\n        const rule = ValidationRules[type];\n        if (rule) {\n            const result = rule.validate(field.value, field, options);\n            if (!result) {\n                errorsByType[type] = rule.message(field, options);\n                isValid = false;\n            }\n        }\n    });\n\n    // エラーメッセージの表示\n    const container = fieldset || field.closest('div');\n    if (container) {\n        const errorElements = container.querySelectorAll('[data-validation=\"error\"]');\n        updateErrorElements(errorElements, errorsByType as { [key: string]: string }, field, options);\n    }\n\n    // data-validation-for属性を持つ離れた場所のエラー要素を探して更新\n    const fieldName = field.getAttribute('name');\n    if (fieldName) {\n        const remoteErrorElements = document.querySelectorAll(`[data-validation=\"error\"][data-validation-for=\"${fieldName}\"]`);\n        const globalErrorContainer = document.querySelector('[data-validation-error-global]');\n        \n        // グローバルエラーの表示制御\n        if (showGlobalErrors || globalErrorContainer?.classList.contains('active')) {\n            updateErrorElements(remoteErrorElements, errorsByType as { [key: string]: string }, field, options);\n        }\n\n        // グローバルエラーコンテナの表示制御\n        const hasVisibleErrors = Array.from(remoteErrorElements).some(\n            el => (el as HTMLElement).style.display === 'block'\n        );\n        globalErrorContainer?.classList.toggle('active', hasVisibleErrors);\n    }\n\n    return isValid;\n}\n\nfunction getErrorMessage(type: string, field: HTMLInputElement, errorsByType: { [key: string]: string }, options?: FormousOptions): string {\n    console.log('Debug getErrorMessage:', {\n        type,\n        errorsByType,\n        hasError: errorsByType[type],\n        options,\n        validationMessages: options?.validationMessages,\n        optionMessage: options?.validationMessages?.[type]\n    });\n\n    // エラーが発生している場合のみメッセージを表示\n    if (!errorsByType[type]) {\n        return '';\n    }\n\n    // 優先順位3: data-error-fixed属性がある場合（最優先）\n    const errorElement = field.closest('div')?.querySelector(`[data-validation-type=\"${type}\"]`);\n    if (errorElement?.hasAttribute('data-error-fixed')) {\n        console.log('Using fixed message:', errorElement.innerHTML);\n        return errorElement.innerHTML;\n    }\n\n    // 優先順位2: オプションで指定されたメッセージ\n    const optionMessage = options?.validationMessages?.[type];\n    if (optionMessage) {\n        console.log('Using option message:', optionMessage);\n        if (typeof optionMessage === 'function') {\n            const message = (optionMessage as (field: HTMLInputElement) => string)(field);\n            console.log('Function message result:', message);\n            return message;\n        }\n        return optionMessage as string;\n    }\n\n    // 優先順位1: ValidationRulesのメッセージ（最後）\n    console.log('Using default message:', errorsByType[type]);\n    return errorsByType[type];\n}\n\n// エラー要素の更新を行うヘルパー関数\nfunction updateErrorElements(elements: NodeListOf<Element>, errorsByType: { [key: string]: string }, field: HTMLInputElement, options?: FormousOptions) {\n    const hasErrors = Object.keys(errorsByType).length > 0;\n\n    elements.forEach(errorElement => {\n        const targetType = errorElement.getAttribute('data-validation-type');\n        const element = errorElement as HTMLElement;\n        const hasInnerText = element.innerHTML.trim();\n        const isFixed = element.hasAttribute('data-error-fixed');\n\n        if (!targetType) {\n            // data-validation-typeがない場合の処理\n            if (hasErrors) {\n                // エラーが1つ以上ある場合\n                const firstErrorType = Object.keys(errorsByType)[0];\n                const message = getErrorMessage(firstErrorType, field, errorsByType, options);\n                \n                if (!isFixed) {\n                    const optionMessage = options?.validationMessages?.[firstErrorType];\n                    if (optionMessage || !hasInnerText) {\n                        element.innerHTML = message;\n                    }\n                }\n                element.style.display = 'block';\n            } else {\n                element.style.display = 'none';\n            }\n            return;\n        }\n\n        // data-validation-typeがある場合の既存の処理\n        const message = getErrorMessage(targetType, field, errorsByType, options);\n        if (isFixed) {\n            element.style.display = errorsByType[targetType] ? 'block' : 'none';\n            return;\n        }\n\n        const optionMessage = options?.validationMessages?.[targetType];\n        if (optionMessage) {\n            element.innerHTML = message;\n        } else if (hasInnerText) {\n        } else {\n            element.innerHTML = message;\n        }\n        element.style.display = errorsByType[targetType] ? 'block' : 'none';\n    });\n}\n\n/**\n * スムーズスクロール機能を提供する関数\n * @param element - スクロール対象のHTML要素\n * @param options - スクロールのオプション設定\n * - offset: スクロール位置の上部からのオフセット（デフォルト: 50px）\n * - behavior: スクロールの動作（'smooth'または'auto'）\n * - duration: スクロールアニメーションの時間（例: '0.5s'）\n */\nexport function smoothScroll(element: HTMLElement, options: FormousOptions['scrollOptions'] = {}) {\n    const {\n        offset = 50,\n        behavior = 'smooth',\n        duration = '0.5s'\n    } = options;\n\n    // スクロールアニメーションの設定\n    document.documentElement.style.setProperty('scroll-behavior', behavior);\n    document.documentElement.style.setProperty('transition-duration', duration);\n\n    // 要素の上部マージンを設定してスクロール位置を調整\n    element.style.scrollMargin = `${offset}px`;\n\n    // スクロール開始前の位置を記録\n    const startPosition = window.scrollY;\n\n    // 要素が既に表示されているかチェック\n    const rect = element.getBoundingClientRect();\n    const isVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;\n\n    if (isVisible) {\n        // 既に見えている場合は直接フォーカス\n        element.focus();\n        return;\n    }\n\n    // 要素まで滑らかにスクロール\n    element.scrollIntoView({\n        behavior,\n        block: 'nearest',\n        inline: 'nearest'\n    });\n\n    // スクロールの完了を監視\n    let lastPosition = window.scrollY;\n    const checkScrollEnd = () => {\n        const currentPosition = window.scrollY;\n\n        // スクロールが完了したかチェック\n        if (currentPosition === lastPosition && currentPosition !== startPosition) {\n            // スクロールが完了し、かつ位置が変わっている場合\n            // CSSプロパティをリセット\n            document.documentElement.style.removeProperty('scroll-behavior');\n            document.documentElement.style.removeProperty('transition-duration');\n            element.focus();\n            return;\n        }\n\n        // まだスクロール中\n        lastPosition = currentPosition;\n        requestAnimationFrame(checkScrollEnd);\n    };\n\n    requestAnimationFrame(checkScrollEnd);\n}\n\n/**\n * フォーム全体のバリデーションを行う関数\n * @param form - バリデーション対象のフォーム要素\n * @param options - バリデーションのオプション設定\n * @returns boolean - バリデーション結果（true: 成功, false: 失敗）\n */\nexport function validateForm(form: HTMLFormElement, options: FormousOptions): boolean {\n    const fields = form.querySelectorAll('input, textarea, select');\n    let isValid = true;\n    let firstErrorField: HTMLElement | null = null;\n\n    // 各フィールドのバリデーション\n    fields.forEach((field) => {\n        const fieldValid = validateField(field as HTMLInputElement, options, true);  // フォーム送信時はグローバルエラーを表示\n        if (!fieldValid) {\n            isValid = false;\n            // 最初のエラーフィールドを記録（スクロール用）\n            if (!firstErrorField) {\n                firstErrorField = field as HTMLElement;\n            }\n        }\n    });\n\n    // エラーがある場合、最初のエラーフィールドまでスクロール\n    if (!isValid && firstErrorField) {\n        setTimeout(() => {\n            if (firstErrorField) {\n                smoothScroll(firstErrorField, options.scrollOptions);\n            }\n        }, 0);\n    }\n\n    return isValid;\n}\n\nexport function Formous(options: FormousOptions) {\n    console.log('1. Formous initialization started');  // ステップ1: 初期化開始\n\n    const form = document.querySelector(options.formSelector) as HTMLFormElement;\n    if (!form) {\n        console.error('Form not found');\n        return;\n    }\n    console.log('2. Form found:', form);  // ステップ2: フォーム発見\n\n    // ステップ3: クリックイベントの設定\n    form.addEventListener('click', (event) => {\n        const target = event.target as HTMLElement;\n        \n        // ボタンクリックの確認\n        if (target.hasAttribute('data-action')) {\n            console.log('3. Action button clicked:', {\n                action: target.getAttribute('data-action'),\n                element: target\n            });\n            \n            event.preventDefault();\n            const action = target.getAttribute('data-action');\n            \n            // 現在のステップを取得\n            const currentStep = target.closest('.step');\n            if (!currentStep) {\n                console.error('Current step not found');\n                return;\n            }\n            console.log('4. Current step:', currentStep);\n\n            // すべてのステップを取得\n            const steps = Array.from(form.querySelectorAll('.step'));\n            const currentIndex = steps.indexOf(currentStep);\n            console.log('5. Current index:', currentIndex);\n\n            // アクションの処理\n            if (action === 'next') {\n                console.log('6. Processing next/confirm action');\n                if (currentIndex < steps.length - 1) {\n                    // 現在のステップを非表示\n                    currentStep.classList.remove('active');\n                    (currentStep as HTMLElement).style.display = 'none';\n                    \n                    // 次のステップを表示\n                    const nextStep = steps[currentIndex + 1];\n                    nextStep.classList.add('active');\n                    (nextStep as HTMLElement).style.display = 'block';\n                    \n                    console.log('7. Moved to next step:', nextStep);\n                }\n            }\n        }\n    });\n\n    console.log('8. Event listener setup completed');\n}\n","import { validateField, smoothScroll } from './validation';\nimport { FormousOptions } from './types';\n\n// ステップフォームを初期化する関数\nexport function initializeStepForm(\n    form: HTMLFormElement,\n    options?: FormousOptions\n) {\n    const {\n        progressFillSelector = '#progress-fill',\n        indicatorSelector = '.step-indicator',\n        progressSelector = '#step-progress',\n        stepOptions: {\n            useDisplayNone = false\n        } = {}\n    } = options || {};\n\n    let steps = Array.from(form.querySelectorAll('.step'));\n    \n    // 最初のステップ以外を非表示に\n    steps.forEach((step, index) => {\n        if (index !== 0) {\n            if (useDisplayNone) {\n                (step as HTMLElement).style.display = 'none';\n            }\n            step.classList.remove('active');\n        }\n    });\n    \n    const progressBarFill = form.querySelector(progressFillSelector) as HTMLElement;\n    const stepIndicators = form.querySelectorAll(indicatorSelector);\n    const stepProgress = form.querySelector(progressSelector) as HTMLElement;\n    const currentStepElement = form.querySelector('[data-step-current]') as HTMLElement;\n    const totalStepElement = form.querySelector('[data-step-total]') as HTMLElement;\n    let currentStepIndex = 0;\n\n    const updateProgressBar = () => {\n        const progressPercentage = ((currentStepIndex + 1) / steps.length) * 100;\n        if (progressBarFill) progressBarFill.style.width = `${progressPercentage}%`;\n        if (stepProgress) stepProgress.setAttribute('aria-valuenow', String(progressPercentage));\n\n        stepIndicators.forEach((indicator, index) => {\n            indicator.classList.toggle('active', index <= currentStepIndex);\n        });\n\n        if (currentStepElement) {\n            currentStepElement.textContent = String(currentStepIndex + 1);\n        }\n        if (totalStepElement) {\n            totalStepElement.textContent = String(steps.length);\n        }\n    };\n\n    const validateCurrentStep = (): boolean => {\n        const currentStep = steps[currentStepIndex];\n        const fields = currentStep.querySelectorAll(\n            'input, textarea, select, [contenteditable=\"true\"], ' + \n            'button[role=\"combobox\"], div[role=\"listbox\"], ' +\n            'div[role=\"slider\"], div[role=\"spinbutton\"]'\n        );\n\n        let isValid = true;\n        fields.forEach((field) => {\n            if (!validateField(field as HTMLInputElement, options)) {\n                isValid = false;\n            }\n        });\n\n        return isValid;\n    };\n\n    const showStep = (index: number) => {\n        steps.forEach((step, i) => {\n            if (useDisplayNone) {\n                (step as HTMLElement).style.display = i === index ? 'block' : 'none';\n            }\n            step.classList.toggle('active', i === index);\n        });\n        currentStepIndex = index;\n        updateProgressBar();\n\n        const currentStep = steps[currentStepIndex];\n        \n        if (currentStep.classList.contains('confirmation-step')) {\n            updateConfirmationPage(steps[currentStepIndex - 1], currentStep);\n        }\n\n        const nextButton = currentStep.querySelector('[data-action=\"next\"]');\n        if (nextButton) {\n            (nextButton as HTMLElement).style.display = 'inline-block';\n        }\n    };\n\n    const updateConfirmationPage = (_formStep: Element, confirmationStep: Element) => {\n        // 各セクションごとに処理\n        const confirmationSections = confirmationStep.querySelectorAll('.confirmation-section');\n        // デリミタの取得（デフォルトは','）\n        const delimiter = options?.confirmationOptions?.delimiter || ',';\n        \n        confirmationSections.forEach(section => {\n            const stepNumber = section.getAttribute('data-step');\n            if (!stepNumber) return;\n            \n            // セクション内の確認項目を更新\n            const confirmSpans = section.querySelectorAll('[data-confirm]');\n            confirmSpans.forEach(span => {\n                const fieldName = span.getAttribute('data-confirm');\n                if (!fieldName) return;\n                \n                // 対応する入力フィールドを検索\n                const field = form.querySelector(`[name=\"${fieldName}\"]`);\n                if (!field) return;\n                let value = '';\n                switch ((field as HTMLInputElement).type) {\n                    case 'checkbox':\n                        // チェックボックスグループの場合\n                        const checkedBoxes = form.querySelectorAll(`input[name=\"${fieldName}\"]:checked`);\n                        value = Array.from(checkedBoxes)\n                            .map(cb => (cb as HTMLInputElement).labels?.[0]?.textContent || (cb as HTMLInputElement).value)\n                            .join(delimiter);\n                        break;\n                    case 'radio':\n                        const checkedRadio = form.querySelector(`input[name=\"${fieldName}\"]:checked`) as HTMLInputElement;\n                        value = checkedRadio ? (checkedRadio.labels?.[0]?.textContent || checkedRadio.value) : '';\n                        break;\n                    default:\n                        value = (field as HTMLInputElement).value;\n                }\n                \n                span.textContent = value || '未入力';\n            });\n        });\n    };\n\n    const handleNext = () => {\n        const isValid = validateCurrentStep();\n        if (!isValid) {\n            const currentStep = steps[currentStepIndex];\n            const firstErrorField = currentStep.querySelector('input:invalid, textarea:invalid, select:invalid') as HTMLElement;\n            if (firstErrorField) {\n                smoothScroll(firstErrorField, options?.scrollOptions);\n            }\n            return;\n        }\n        \n        if (currentStepIndex < steps.length - 1) {\n            showStep(currentStepIndex + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentStepIndex > 0) {\n            showStep(currentStepIndex - 1);\n        }\n    };\n\n    const handleIndicatorClick = (index: number) => {\n        if (index > currentStepIndex && !validateCurrentStep()) {\n            return;\n        }\n        showStep(index);\n    };\n\n    showStep(currentStepIndex);\n\n    form.addEventListener('click', (event) => {\n        const target = event.target as HTMLElement;\n        if (target.hasAttribute('data-action')) {\n            const action = target.getAttribute('data-action');\n            if (action === 'next' || action === 'confirm') handleNext();\n            else if (action === 'previous') handlePrevious();\n            else if (action === 'edit') {\n                const targetStep = parseInt(target.getAttribute('data-target-step') || '1') - 1;\n                showStep(targetStep);\n            }\n        }\n    });\n\n    stepIndicators.forEach((indicator, index) => {\n        indicator.addEventListener('click', () => handleIndicatorClick(index));\n    });\n\n    return {\n        showStep,\n        handleNext,\n        handlePrevious,\n        updateProgressBar\n    };\n}\n\nconst validationRules = {\n    required: {\n        message: 'This field is required'\n    }\n};\n\nconst customRule = validationRules['required'];\nif (customRule) {\n    console.log(`Custom rule found: ${customRule.message}`);\n}\n","/**\n * Formousライブラリのメインモジュール\n * フォームのバリデーション、スクロール、ステップ管理などの機能を提供\n */\nimport { validateField, validateForm, addCustomValidationRules, smoothScroll } from './validation';\nimport { initializeStepForm } from './step';\nimport { FormousOptions } from './types';\n\n// グローバルな型定義を拡張するための宣言\n// これにより、windowオブジェクトに新しいプロパティを追加できる\ndeclare global {\n  // ブラウザのWindowインターフェースを拡張\n  interface Window {\n    // FormousInitと同じ型を持つFormousプロパティを追加\n    // これにより window.Formous = FormousInit; のような代入が可能になる\n    Formous: typeof FormousInit;\n\n    // Webflowプロパティを追加\n    // any[]は「どんな型でも許容する配列」を意味する\n    // window.Webflow.push() などの操作が可能になる\n    Webflow: any[];\n  }\n}\n\n// 実際の使用例：\n// window.Webflow が未定義の場合は空配列で初期化\nif (typeof window !== 'undefined') {\n  window.Webflow = window.Webflow || [];\n}\n\n/**\n * Formousのメイン初期化関数\n * @param options - フォームの設定オプション\n * @returns フォーム操作用のメソッドを含むオブジェクト\n */\nconst FormousInit = (options: FormousOptions) => {\n  // Webflow統合モードの場合\n  if (options.enableWebflow) {\n    // window.Webflow.push() は Webflowの機能\n    // DOMContentLoaded後に実行されることが保証される\n    // コールバック関数として initializeFormous を登録\n    window.Webflow.push(() => {\n      initializeFormous(options);\n    });\n    return;  // Webflowモードでは即時実行せずにreturn\n  }\n\n  // 通常モードの場合（Webflow統合なし）\n  // 即時実行してその結果を返す\n  return initializeFormous(options);\n}\n\n/**\n * フォームの実際の初期化処理を行う内部関数\n * @param options - フォームの設定オプション\n * @returns フォーム操作用のメソッドを含むオブジェクト\n */\nfunction initializeFormous(options: FormousOptions) {\n  const form = document.querySelector(options.formSelector) as HTMLFormElement;\n  if (!form) {\n    console.error('Form not found');\n    return;\n  }\n\n  // カスタムバリデーションルールの登録\n  if (options.customRules) {\n    addCustomValidationRules(options.customRules);\n  }\n\n  // リアルタイムバリデーションの設定\n  const fields = form.querySelectorAll('input, textarea, select');\n  fields.forEach((field) => {\n    field.addEventListener('input', () => validateField(field as HTMLInputElement, options, false));  // リアルタイムではグローバルエラーを表示しない\n    field.addEventListener('blur', () => validateField(field as HTMLInputElement, options, false));   // フォーカスアウト時もグローバルエラーを表示しない\n  });\n\n  // Webflow統合時の特別な設定\n  if (options.enableWebflow) {\n    form.setAttribute('novalidate', 'true');\n    // 初期状態ではエラーメッセージを非表示\n    form.querySelectorAll('[data-validation=\"error\"]').forEach(error => {\n      (error as HTMLElement).style.display = 'none';\n    });\n  }\n\n  // フォーム送信時の処理\n  form.addEventListener('submit', async (e) => {\n    if (options.enableWebflow) {\n      // Webflow統合モードでのバリデーション\n      const isValid = validateForm(form, options);\n      if (!isValid) {\n        e.preventDefault();\n        e.stopPropagation();\n        return;\n      }\n      return;  // Webflowの標準送信を許可\n    }\n\n    // 通常モードでの送信処理\n    e.preventDefault();\n    const isValid = validateForm(form, options);\n\n    if (!isValid) {\n      // エラー時の処理：最初のエラーフィールドまでスクロール\n      const firstErrorField = form.querySelector('input:invalid, textarea:invalid, select:invalid') as HTMLElement;\n      if (firstErrorField) {\n        smoothScroll(firstErrorField, options.scrollOptions);\n      }\n      return;\n    }\n\n    // カスタム送信処理の実行\n    const formData = new FormData(form);\n    try {\n      if ('onSubmit' in options) {\n        await (options as { onSubmit: (data: FormData) => Promise<void> }).onSubmit(formData);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  });\n\n  // ステップフォームを常に初期化\n  return initializeStepForm(form, options);\n\n  // フォーム操作用のメソッドを返却\n  return {\n    validateForm: () => validateForm(form, options),\n    validateField: (field: HTMLInputElement) => validateField(field, options)\n  };\n}\n\n// 名前付きエクスポートのみを使用\nexport { FormousInit as Formous };\n\n// グローバル変数として公開\nif (typeof window !== 'undefined') {\n  window.Formous = FormousInit;\n}\n"],"names":["defaultValidationRules","value","field","_a","minLength","maxLength","minValue","numValue","maxValue","pattern","url","targetId","targetField","_","files","group","checkboxes","min","max","checkedCount","checkbox","emailInput","options","config","requireUppercase","requireNumber","requireSymbol","requirements","ValidationRules","addCustomValidationRules","customRules","validateField","showGlobalErrors","fieldset","isValid","errorsByType","standardValidations","typeValidations","validationType","rule","validation","optionMessage","message","_b","type","container","errorElements","updateErrorElements","fieldName","remoteErrorElements","globalErrorContainer","hasVisibleErrors","el","getErrorMessage","errorElement","_c","elements","hasErrors","targetType","element","hasInnerText","isFixed","firstErrorType","smoothScroll","offset","behavior","duration","startPosition","rect","lastPosition","checkScrollEnd","currentPosition","validateForm","form","fields","firstErrorField","initializeStepForm","progressFillSelector","indicatorSelector","progressSelector","useDisplayNone","steps","step","index","progressBarFill","stepIndicators","stepProgress","currentStepElement","totalStepElement","currentStepIndex","updateProgressBar","progressPercentage","indicator","validateCurrentStep","showStep","i","currentStep","updateConfirmationPage","nextButton","_formStep","confirmationStep","confirmationSections","delimiter","section","span","checkedBoxes","cb","checkedRadio","handleNext","handlePrevious","handleIndicatorClick","event","target","action","targetStep","validationRules","customRule","FormousInit","initializeFormous","error","e","formData"],"mappings":"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"}